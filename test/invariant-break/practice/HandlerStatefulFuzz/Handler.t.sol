// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {HandlerStatefulFuzzCatches} from "../../../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {MockUSDC} from "../../../mocks/MockUSDC.sol";
import {YeildERC20} from "../../../mocks/YeildERC20.sol";

contract Handler is Test {
    HandlerStatefulFuzzCatches internal hsfc;
    MockUSDC internal usdcToken;
    YeildERC20 internal yeildToken;
    address internal user;

    constructor(
        HandlerStatefulFuzzCatches _hsfc,
        MockUSDC _usdcToken,
        YeildERC20 _yeildToken,
        address _user
    ) {
        hsfc = _hsfc;
        usdcToken = _usdcToken;
        yeildToken = _yeildToken;
        user = _user;
    }

    function depositUSDC(uint256 amount) public {
        amount = bound(amount, 0, usdcToken.balanceOf(user));

        vm.startPrank(user);
        usdcToken.approve(address(hsfc), amount);
        hsfc.depositToken(usdcToken, amount);
        vm.stopPrank();
    }

    function depositYeildToken(uint256 amount) public {
        amount = bound(amount, 0, yeildToken.balanceOf(user));

        vm.startPrank(user);
        yeildToken.approve(address(hsfc), amount);
        hsfc.depositToken(yeildToken, amount);
        vm.stopPrank();
    }

    function withdrawUSDC() public {
        vm.startPrank(user);
        hsfc.withdrawToken(usdcToken);
        vm.stopPrank();
    }

    function withdrawYeildToken() public {
        vm.startPrank(user);
        hsfc.withdrawToken(yeildToken);
        vm.stopPrank();
    }
}
