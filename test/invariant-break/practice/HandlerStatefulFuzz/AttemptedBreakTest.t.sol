// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {HandlerStatefulFuzzCatches} from "../../../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {MockUSDC} from "../../../mocks/MockUSDC.sol";
import {YeildERC20} from "../../../mocks/YeildERC20.sol";

contract AttemptedBreakTest is StdInvariant, Test {
    address internal user = makeAddr("user");

    HandlerStatefulFuzzCatches internal hsfc;
    MockUSDC internal usdcToken;
    YeildERC20 internal yeildToken;
    IERC20[] internal supportedTokens;

    uint256 internal startingUserAmount;

    function setUp() public {
        vm.startPrank(user);
        usdcToken = new MockUSDC();
        yeildToken = new YeildERC20();
        startingUserAmount = yeildToken.INITIAL_SUPPLY();
        usdcToken.mint(user, startingUserAmount);
        vm.stopPrank();

        supportedTokens.push(usdcToken);
        supportedTokens.push(yeildToken);

        hsfc = new HandlerStatefulFuzzCatches(supportedTokens);
        targetContract(address(hsfc));
    }

    function test_StartingAmountTheSame() external {
        assertEq(usdcToken.balanceOf(user), startingUserAmount);
        assertEq(yeildToken.balanceOf(user), startingUserAmount);
    }

    function statefulFuzz_testInvariantBreaks() external {
        vm.startPrank(user);
        hsfc.withdrawToken(usdcToken);
        hsfc.withdrawToken(yeildToken);
        vm.stopPrank();

        assertEq(usdcToken.balanceOf(address(hsfc)), 0);
        assertEq(yeildToken.balanceOf(address(hsfc)), 0);

        assertEq(usdcToken.balanceOf(user), startingUserAmount);
        assertEq(yeildToken.balanceOf(user), startingUserAmount);
    }
}
