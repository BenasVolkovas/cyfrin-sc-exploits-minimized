// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {HandlerStatefulFuzzCatches} from "../../../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {MockUSDC} from "../../../mocks/MockUSDC.sol";
import {YeildERC20} from "../../../mocks/YeildERC20.sol";
import {Handler} from "./Handler.t.sol";

contract InvariantTest is StdInvariant, Test {
    address internal user = makeAddr("user");

    HandlerStatefulFuzzCatches internal hsfc;
    MockUSDC internal usdcToken;
    YeildERC20 internal yeildToken;
    IERC20[] internal supportedTokens;

    Handler internal handler;

    uint256 internal startingUserAmount;

    function setUp() public {
        vm.startPrank(user);
        usdcToken = new MockUSDC();
        yeildToken = new YeildERC20();
        startingUserAmount = yeildToken.INITIAL_SUPPLY();
        usdcToken.mint(user, startingUserAmount);
        vm.stopPrank();

        supportedTokens.push(usdcToken);
        supportedTokens.push(yeildToken);

        hsfc = new HandlerStatefulFuzzCatches(supportedTokens);

        handler = new Handler(hsfc, usdcToken, yeildToken, user);

        bytes4[] memory selectors = new bytes4[](4);
        selectors[0] = handler.depositUSDC.selector;
        selectors[1] = handler.depositYeildToken.selector;
        selectors[2] = handler.withdrawUSDC.selector;
        selectors[3] = handler.withdrawYeildToken.selector;

        targetContract(address(handler));
        targetSelector(
            FuzzSelector({addr: address(handler), selectors: selectors})
        );
    }

    function statefulFuzz_testInvariantBreaksHandler() external {
        vm.startPrank(user);
        hsfc.withdrawToken(usdcToken);
        hsfc.withdrawToken(yeildToken);
        vm.stopPrank();

        assertEq(usdcToken.balanceOf(address(hsfc)), 0);
        assertEq(yeildToken.balanceOf(address(hsfc)), 0);

        assertEq(usdcToken.balanceOf(user), startingUserAmount);
        assertEq(yeildToken.balanceOf(user), startingUserAmount);
    }
}
